
tokens {
    id <- `a`;
    top <= id | `*` | `+` | `-` | `/` | `;` | `n` | `@` | `!`;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    main { Stmt, Expr }

    prop { name_strict; }

    prec {
        Expr.Bin1 assoc_left;
        Expr.Bin2 assoc_left;
        Expr.Id;
    }

    Stmt.Seq <- exprs:#L[e:Expr::`;`];
    Stmt.Nop <- `n`;

    Expr.Bin1 <- lhs_:Expr op:(ADD:(`+` suffix:AddSuffix) | SUB:`-`) rhs_:Expr;

        AddSuffix <- tail:`+`?;

    Expr.Bin2 <- lhs_:Expr op:(MUL:(`*` suffix:MulSuffix) | DIV:`/`) rhs_:Expr;

        MulSuffix <- tail:((AT_SYM:`@` | BANG:`!`)*);

    Expr.Id <- name:id;
}

compile_test {
    !LR(0);
    LR(1);
    LR(2);
}

test {
    `a`;
    `a+a;a`;
    `a+a;a;a;a`;
    `a++a;a;a;a`;
    `n`;
    `n##a`;
    `a+a`;
    `a++a`;
    `a++a++a`;
    `a++a+a`;
    `a+a+a`;
    `a+a*a`;
    `a+a*!!@@a`;
    `a+a*a*a++a*a`;
    `a+a*a*!!@@a++a*@@@!a`;
    `##+a`;
    `a+##`;
    `a+##*a`;
}
