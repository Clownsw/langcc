
tokens {
    id <- `a`;
    top <= id | `*` | `+` | `_`;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    main { E }

    prec {
        E.Add assoc_left;
        E.Mul assoc_left;
        E.Id;
    }

    E.Add <- E `_` `+` E;
    E.Mul <- E `_` `*` E;
    E.Id <- id;

    prop { LR(2); }
}

compile_test {
    !LR(0);
    !LR(1);
    LR(2);
}

test {
    `a`;
    `a_+a`;
    `a_+a_+a`;
    `a_+a_*a`;
    `a_+a_*a_*a_+a_*a`;
    `##_+a`;
    `a_+##`;
    `a_+##_*a`;
    `a##+a`;
    `a_##_a`;
}
