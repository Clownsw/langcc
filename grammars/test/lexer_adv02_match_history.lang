
tokens {
    ws <- ` `;
    par_item <= `a` | `b`;
    par <- false;
    sep <- false;
    top <= `a`;
}

lexer {
    main { body }

    mode body {
        top => {
            match_history {
                par => { emit sep; emit; }
                _ => { emit; }
            };
        }
        ws => { pass; }
        `(` => { push par; pass; }
        eof => { pop; }
    }

    mode par {
        `)` => { pass; pop_emit par; }
        par_item => { pass; }
    }
}

parser {
    main { S }

    S <- `a` par sep `a`;
}

test {
    `a()a` <<>>;
    `a(a)a` <<>>;
    `a(ab)a` <<>>;
    `a(aba)a` <<>>;
    `a(babbab)a` <<>>;
    `a(##(` <<>>;
    `a##b` <<>>;
}
