
tokens {
    a <- `a`;
    b <- `b`;
    c <- `c`;
    d <- `d`;

    top <= a | b | c | d;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    main { S }

    S.aXaa <- a ~X a a;
    S.aXba <- a ~X b a;
    S.bXab <- b ~X a b;
    S.bXbb <- b ~X b b;

    S.aYab <- a ~Y a b;
    S.bYba <- b ~Y b a;

    S.aZba <- a ~Z b b;
    S.bZab <- b ~Z a a;

    S.cZa <- c ~Z a;
    S.dZb <- d ~Z b;
    S.cWb <- c ~W b;
    S.dWa <- d ~W a;

    X <- c ~Xr;
    Y <- c ~Yr ~Cm;
    Z <- c ~Zr ~Cm;
    W <- c ~Wr c;

    Cm.e <- eps;
    Cm.c <- c;

    Xr <- c c c;
    Yr <- c c c;
    Zr <- c c c;
    Wr <- c c c;

    prop { LR(2); }
}

compile_test {
    !LR(0);
    !LR(1);
    LR(2);
    LR(3);
}

test {
    // X
    `accccaa`;
    `accccba`;
    `bccccab`;
    `bccccbb`;

    // Y
    `accccab`;
    `bccccba`;
    `acccccab`;
    `bcccccba`;

    // Z
    `accccbb`;
    `bccccaa`;
    `acccccbb`;
    `bcccccaa`;

    // Z/W
    `ccccca`;
    `dccccb`;
    `cccccca`;
    `dcccccb`;
    `ccccccb`;
    `dccccca`;

    `ccccc##b`;
    `dcccc##a`;
    `accccaa##a`;
}
