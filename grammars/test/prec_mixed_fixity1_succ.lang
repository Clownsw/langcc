
tokens {
    id <- `x`;
    top <= id | `^` | `*` | `+` | `-` | `(` | `)` | `.`;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    main { S, E }

    prec {
        E.Add assoc_left;
        E.Mul assoc_left;
        E.Neg prefix;
        E.Pow assoc_left;
        E.Call postfix;
        E.Dot assoc_left;
        E.Id;
    }

    S <- E;

    E.Add <- E `+` E;
    E.Mul <- E `*` E;
    E.Neg <- `-` E;
    E.Pow <- E `^` E;
    E.Call <- E `(` E[pr=*] `)`;
    E.Dot <- E `.` E;
    E.Id <- id;
}

compile_test {
    !LR(0);
    LR(1);
    LR(2);
}

test {
    `x`;
    `x+x`;
    `x+x*x^x`;
    `-x`;
    `---x`;
    `-x*-x*-x`;
    `-x^x`;
    `x^-x`;
    `x(x)`;
    `x.x`;
    `x.x.x`;
    `x+x.x`;
    `x(x).x`;
    `x(x).x(x).x(x)`;
    `x(x)(x).x(x(x)).x(x.x)`;
    `x.x(x+x)`;
    `x.x(x).x(x+x)`;
}
