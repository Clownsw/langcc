
tokens {
    id <- `x`;
    top <= id | `(` | `)` | `.`;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    main { E }

    prec {
        E.Call assoc_left;
        E.Dot assoc_left;
        E.Id;
    }

    E.Call <- E `(` `)`;
    E.Dot <- E `.` id;
    E.Id <- id;
}

compile_test {
    !LR(0);
    LR(1);
    LR(2);
}

test {
    `x`;
    `x.x`;
    `x.x.x`;
    `x()`;
    `x()()`;
    `x.x()`;
    `x.x.x()()`;
    `x()##.x`;
}
