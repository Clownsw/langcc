
tokens {
    a <- `a`;
    b <- `b`;
    top <= a | b;
}

lexer {
    main { body }

    mode body {
        top => { emit; }
        eof => { pop; }
    }
}

parser {
    S.A <- A;
    S.B <- B;

    A <- a;
    B <- b;

    main { S, A, B }
}

compile_test {
    !LR(0);
    LR(1);
    LR(2);
}

test {
    `a`;
    `b`;
    `##`;
    `a##a`;

    `a` <- S;
    `b` <- S;
    `##` <- S;
    `a##a` <- S;

    `a` <- A;
    `##b` <- A;
    `##a` <- B;
    `b` <- B;
}
